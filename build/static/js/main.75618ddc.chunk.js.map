{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/SubComponents/SubComponents.js","Layout/SubComponents/Forms.js","Layout/DeckComponents/CreateNew.js","Layout/DeckComponents/DecksListed.js","Layout/DeckComponents/ViewDeck.js","Layout/DeckComponents/EditDeck.js","Layout/DeckComponents/StudyTop.js","Layout/DeckComponents/NotEnoughCards.js","Layout/DeckComponents/StudyByCard.js","Layout/DeckComponents/StudyDeck.js","Layout/CardComponents/CardForm.js","Layout/CardComponents/CardEdit.js","Layout/CardComponents/AddCards.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","Buttons","NewDeckSubmitButtons","props","newOrEdit","to","type","DeckFormFields","apiRefresh","setApiRefresh","console","log","history","useHistory","x","y","description","useState","deckFormContent","setDeckFormContent","useEffect","createFetch","createDeck","then","result","push","updateFetch","updateDeck","onSubmit","event","preventDefault","defaultValue","onChange","target","value","placeholder","DeckForm","setDeck","append","CreateNew","setNewOrEdit","DecksListed","allDecks","setAllDecks","deleteClick","ID","getAttribute","window","confirm","listDecks","listedDeckCards","map","eachDeck","index","length","onClick","data-arg1","ViewDeck","useParams","CardList","front","back","deleteCardClick","data-Arg1","deleteCard","EditDeck","StudyTop","NotEnoughCards","deckLength","StudyByCard","cardOfDeck","setCardOfDeck","flipped","setFlipped","fOrB","setFOrB","nextHandler","flipHandler","StudyDeck","setCard","NewCardSubmitButtons","newOrEditCard","CardForm","thisCard","editBegun","setEditBegun","frontIf","backIf","cardContent","setCardContent","createCard","updateCard","CardEdit","setThisCard","AddCards","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75618ddc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { createDeck, updateDeck } from \"../../utils/api/index\"\n\nfunction NavBreadCrumb({ page, deckLink, deck, deep }) {//can likely leave this untouched... might have to delete extraneous\n    console.log(page)\n    console.log(deep)\n    const undeep = () => {\n        // useEffect(()=>{\n        // setMainState({...mainState, deepBreadCrumb:false, page:deck.name})\n        // },[])\n    }\n    return (\n        <h5><Link to=\"/\">Home/</Link>{deep && <Link to={deckLink} onClick={undeep}>{deck ? `${deck.name}/` : null}</Link>}{page}</h5>\n    )\n}\n// const abortController = new AbortController()\nfunction Buttons() {\n    return null\n}\nfunction NewDeckSubmitButtons(props) {\n    const { newOrEdit, deck } = props;\n    return (<div>\n        <Link to={(newOrEdit === \"new\") ? \"/\" : `/decks/${deck.id}`} className=\"btn\">Cancel</Link>\n        <button type=\"submit\">Submit</button>\n    </div>\n    )\n}\nfunction DeckFormFields(props\n    // deckId\n) {\n    // const[deck,setDeck]=useState({})\n    const { newOrEdit, apiRefresh, setApiRefresh, deck\n        // editState, mainState, setAllDecks, allDecks, setError,\n    } = props\n    // console.log(allDecks)\n    console.log(typeof (deck), \"type of of deck\")\n    // console.log(typeof allDecks, \"alldecks type\")\n    // console.log(allDecks,\"all decks\")\n    // const{deckId}=useParams()\n    console.log(newOrEdit, \"neworeditState\")\n    const history = useHistory()\n    //     useEffect(()=>{\n    //         readDeck(deckId,AbortController.signal).then(setDeck)\n\n    // },[])\n\n    console.log(deck, \"deck\")//=>gives correct deck object with content\n    const x = (newOrEdit === \"edit\") ? deck.name : \"\"\n    const y = (newOrEdit === \"edit\") ? deck.description : \"\"\n    console.log(x, \"name\", y, \"desc\")//=> gives both x and y correctly as deck.name and deck.description\n    // const z={name:x,description:y} //=>prints name:correct name, description:correct description\n    // console.log(z,\"z insert of default object\")\n    //useState initiates state\n    const [deckFormContent, setDeckFormContent] = useState({ name: x, description: y })\n    //check\n    useEffect(() => {\n        if (newOrEdit === \"edit\" && !deckFormContent.name && deck.name) {\n            setDeckFormContent({ name: deck.name, description: deck.description })\n        }\n    },[newOrEdit,deckFormContent.name,deck.name,deck.description])\n\n\n    console.log(deckFormContent, \"deckFormContent\")//=>Prints name:undefined, description:undefined\n\n\n    // console.log(deckFormContent,\"deckFormContent\") //=>gives {name: undefined, description: undefined}\n    // console.log(x,\"nameIf checking on far side of failure\")asdfa\n    // console.log(editState,\"editState\")\n    const handleChangeTitleForm = ({ target }) => {\n        setDeckFormContent({ ...deckFormContent, name: target.value })\n        console.log(\"handlechangecalled\")\n    }\n    const handleChangeDescForm = ({ target }) => {\n        console.log(\"loghandlechangecalled\")\n        setDeckFormContent({ ...deckFormContent, description: target.value })\n    }\n\n    const createFetch = () => {\n        createDeck({ ...deckFormContent })\n            .then((result) => {\n                // console.log(result);\n                // console.log(result,\"api create result\")\n                // console.log(allDecks,\"allDecks not iterable but spread? Not iterating???\")\n                // setAllDecks([...allDecks,result])\n                setApiRefresh(apiRefresh + 1)\n                history.push(`/decks/${result.id}`)\n            })\n        // .catch((error)=>{console.log(error)})\n    }\n    const updateFetch = () => {\n        updateDeck({ ...deckFormContent, id: deck.id })\n            .then((result) => {\n                // console.log(result,\"result from update fetch\")\n                // console.log(typeof allDecks,allDecks,\"allDecks type and actual content\")\n                // setAllDecks([...allDecks])\n                // console.log(result.id,\"result.id\")\n                setApiRefresh(apiRefresh + 1)\n                history.push(`/decks/${result.id}`)\n\n            })\n        // .catch((error)=>{console.log(error)})\n    }\n\n    // console.log(\"deckformfields Reached\")\n    // edit?console.log(deck.id,\"deck ID should exist if editing \"):console.log(\"wtf\")\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        createFetch()\n    }\n    const handleUpdate = (event) => {\n        event.preventDefault();\n        updateFetch()\n    }\n    return (<form onSubmit={(newOrEdit === \"edit\") ? handleUpdate : handleSubmit}>\n        <label >Name\n       <textarea\n                defaultValue={deckFormContent.name}\n                onChange={handleChangeTitleForm}\n                placeholder=\"Deck Name\"\n            />\n        </label><br />\n        <label >\n            Description\n       <textarea\n                defaultValue={deckFormContent.description}\n                onChange={handleChangeDescForm}\n                placeholder=\"Brief description of the deck\"\n            />\n        </label><br />\n        <NewDeckSubmitButtons newOrEdit={newOrEdit} deck={deck} />\n    </form>\n    )\n}\n\nfunction CardFormFields() {\n    return null\n}\n\nexport { NavBreadCrumb, DeckFormFields, Buttons, CardFormFields, NewDeckSubmitButtons }","import React from \"react\"\n// import {Link} from \"react-router-dom\"\nimport { Buttons, DeckFormFields, CardFormFields } from \"./SubComponents\"\n\nfunction DeckForm({ newOrEdit,\n    // ,setAllDecks, setError, \n    setDeck, deck, apiRefresh, setApiRefresh,\n    //  page, mainState\n    // deckId\n}) {\n\n\n    return (\n        <div>\n            <DeckFormFields\n                // editState={editState} mainState={mainState} setAllDecks={setAllDecks} setError={setError} \n                setDeck={setDeck} deck={deck} apiRefresh={apiRefresh} setApiRefresh={setApiRefresh} newOrEdit={newOrEdit}\n            // deckId={deckId}\n            />\n            <Buttons />\n        </div>\n    )\n}\n\nfunction CardForm({ apiRefresh, setApiRefresh, setDeck, newOrEdit,\n    // editState,allDecks,setAllDecks, setError,\n    deck }) {\n    return (\n        <div>\n            <CardFormFields\n                //  editState={editState} setAllDecks={setAllDecks}\n                apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n                setDeck={setDeck} newOrEdit={newOrEdit}\n                // setError={setError} \n                deck={deck}\n            // deckId={deckId}\n            />\n            <Buttons />\n        </div>\n    )\n\n}\n\nexport { DeckForm, CardForm }\n\n//use <DeckForm editState={mainState.edit}/>\n//use <CardForm editState={mainState.edit}/>","import React, { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\n// import {Buttons,NavBreadCrumb} from \"../SubComponents/SubComponents\"\nimport { DeckForm } from \"../SubComponents/Forms\"\n// import {NewDeckSubmitButtons} from \"../SubComponents/SubComponents\"//Not necessary, placed in form component\n\nfunction CreateNew(props) {\n    // const{mainState,setMainState,allDecks,setAllDecks,error,setError}=props\n    const { apiRefresh, setApiRefresh\n        // mainState,setAllDecks,setMainState\n    } = props\n    const [newOrEdit, setNewOrEdit] = useState(\"new\")\n    const [deck, setDeck] = useState([])\n    // const highestDeck=allDecks.map\n\n    useEffect(() => {\n        // console.log(mainState,\"mainstate\");\n        setNewOrEdit(\"new\")\n        // (()=>({...mainState, create:true, editState:false, page:\"Create Deck\"}))\n        // console.log(mainState,\"mainState\")\n    }, [\n        // mainState.editState\n    ])\n    // const createTempDeck = {}\n    // console.log(mainState,\"mainState outside update useEffect\")\n    return (\n        <div>\n            {/* <NavBreadCrumb page={mainState.page}  mainState={mainState} \n            setMainState={setMainState} deck={createTempDeck}/>             */}\n            <h5><Link to=\"/\">Home</Link>/ Create Deck</h5>\n            <h3>\n                {/* {mainState.page} */}\n                Create Deck\n            </h3>\n            <DeckForm\n                // editState={mainState.editState} setAllDecks={setAllDecks} allDecks={allDecks} setError={setError} mainState={mainState}\n                newOrEdit={newOrEdit} deck={deck} apiRefresh={apiRefresh} setApiRefresh={setApiRefresh} setDeck={setDeck}\n            />\n            {/* <NewDeckSubmitButtons/> */}\n            {/* <Buttons setAllDecks={setAllDecks} mainState={mainState}/> */}\n        </div>\n    )\n}\n\nexport default CreateNew\n// setProp((prevState) => ({ ...prevState, stopped: true }));","import React, { useState, Fragment, useEffect } from \"react\"\nimport { Link, } from \"react-router-dom\"\nimport { deleteDeck, listDecks } from \"../../utils/api/index\"\n//list all decks for \"/\" path\nfunction DecksListed(props) {\n    const [allDecks, setAllDecks] = useState([])\n    //   const [apiRefresh,setApiRefresh]=useState(false)\n    // \n    // const {\n    //   // allDecks, setAllDecks, \n    // setError, error\n    // //     // deleteProp\n    // }=props\n    const { apiRefresh, setApiRefresh } = props\n    // const abortController = new AbortController()\n    // const history=useHistory()\n    // getAllDecks(){\n    // const findCurrentDecks = await listDecks(AbortSignal)\n    useEffect(() => {\n\n\n        listDecks().then(setAllDecks)\n        // .catch(setError);\n\n        // return () => abortController.abort();\n    }, [apiRefresh]);\n\n    // if (error){\n    //   return null\n    // }\n    // }\n\n    function deleteClick(event) {//event contains deckId\n\n        // console.log(\"entered DeleteClick\")\n        // console.log(allDecks,\"allDecks\")\n        // useEffect(()=>{\n        event.preventDefault();//probably not necessary if not a submit button\n        let ID = event.target.getAttribute(\"data-arg1\")\n        if (window.confirm(\"Delete this deck? You will not be able to recover it.\")) {\n            deleteDeck(ID)\n                .then((x) => { setApiRefresh(apiRefresh + 1) })\n        }\n        // .then((x)=>{setApiRefresh(false)})\n        //   const decksLessDelete=allDecks.filter((deck)=>deck.id!==parseInt(ID)) \n        //   console.log(decksLessDelete,\"deckslessdelete\")\n        // setAllDecks(decksLessDelete)\n        // history.push(\"/\")})\n        // this is likely not the move to do here cause the reply is an empty {}\n        // .catch(setError);\n        // if (error){\n        //   return null\n        // } //no need for an error handler. Not 100% sure why\n    }\n    // getAllDecks(); likely not necessary b/c useEffect of list all watching setAllDecks\n    // history.push(\"/\") // might not be necessary cause it's in api?\n\n    // const deckLength=\n    // console.log(allDecks,\"allDecks prop in decklisted tested\") //working\n    // const [deckCardTotal,setDeckCardTotal]=useState(deckLength)\n    const listedDeckCards = allDecks.map((eachDeck, index) => {\n        return (\n            <div key={index}>\n                <h2>{`${eachDeck.name}`}</h2>\n                <p>{`${eachDeck.cards ? eachDeck.cards.length : \"0\"} cards`}</p>\n                {/* don't really need card or a clause for zero on length, as zero length is zero */}\n                <br />\n                <p>{eachDeck.description}</p>\n                <Link to={`/decks/${eachDeck.id}`} className=\"btn btn-dark\"\n                >View</Link>\n                <Link to={`/decks/${eachDeck.id}/study`} className=\"btn btn-dark\"\n                >Study</Link>\n                <button onClick={deleteClick} data-arg1={eachDeck.id}>Delete</button>\n            </div>)\n    })\n\n    return (\n        <Fragment>\n            {/* <Switch> */}\n\n            {/* <Route> */}\n            {listedDeckCards}\n            {/* </Route> */}\n            {/* </Switch> */}\n        </Fragment>\n    )\n}\n\nexport default DecksListed\n    // function GetAllDecks(){\n    //     // const findCurrentDecks = await listDecks(AbortSignal)\n    //     useEffect(() => {\n\n\n    //       listDecks(abortController.signal).then(setAllDecks).catch(setError);\n\n    //       return () => abortController.abort();\n    //     }, []);\n\n    //     if (error){\n    //       return null\n    //     }\n    //     }","import React, { useState, useEffect } from \"react\"\nimport { Link, useParams, useHistory } from \"react-router-dom\"\n// import {  NavBreadCrumb } from \"../SubComponents/SubComponents\"\nimport { readDeck, deleteDeck, deleteCard } from \"../../utils/api/index\"\n// import { DeckForm } from \"../SubComponents/Forms\"\n// import {useParams} from \"react-router-dom\"\n// import EditDeck from \"./EditDeck\"\n// import StudyDeck from \"./StudyDeck\"\n\n// import AddCards from \"../CardComponents/AddCards\"\n// import CardEdit from \"../CardComponents/CardEdit\"\n\nfunction ViewDeck(props) {\n    const { apiRefresh, setApiRefresh\n        //  setMainState, mainState, setAllDecks, allDecks\n    } = props\n    const [deck, setDeck] = useState({ name: \"no deck\", cards: [] })\n\n    // const {url} = useRouteMatch()\n    const history = useHistory()\n    // const abortController = new AbortController()\n\n    const { deckId } = useParams()//Do your fetching with this\n    useEffect(() => {\n        readDeck(deckId).then((deck) => {\n            setDeck(deck)\n        })\n\n    }, [apiRefresh,deckId])\n\n\n    // const cardTotal = deck.cards.length;\n\n    function CardList(props) {\n        // const { deckProp } = props\n\n        return (<div>{\n            deck.cards.map((card = [], index) => {\n                return (<div key={index}>\n                    <p>{card.front}</p>\n                    <p>{card.back}</p>\n                    <Link to={`/decks/${deck.id}/cards/${card.id}/edit`}>Edit</Link>\n                    <button type=\"button\" onClick={deleteCardClick} data-Arg1={card.id}>Delete</button>\n                    {/* <CardButton/> */}\n                </div>)\n                // return (\n                //     <Fragment>\n                //         {}\n                //     </Fragment>\n                // )\n            })}</div>)\n    }\n    const deleteClick = (ID) => {\n        if (window.confirm(\"Delete this deck? You will not be able to recover it.\"))\n            deleteDeck(ID)\n                .then((x) => {\n                    // const decksLessDelete = allDecks.filter((deck) => deck.id !== parseInt(ID))\n                    // console.log(decksLessDelete, \"deckslessdelete\")\n                    // setAllDecks(decksLessDelete)\n                    // setApiRefresh(!apiRefresh)\n                    history.push(\"/\")\n\n                })\n        // this is likely not the move to do here cause the reply is an empty {}\n        // .catch(setError);\n\n\n        // if (error) {\n        //     return null\n        // }\n    }\n    const deleteCardClick = (event) => {\n        const cardId = event.target.getAttribute(\"data-arg1\")\n        if (window.confirm(\"Delete this card? You will not be able to recover it.\"))\n            deleteCard(cardId)\n                .then((x) => {\n                    // const deckCardDeleted = deck.cards.filter((card)=>card.id!==cardId)\n                    setApiRefresh(apiRefresh + 1)\n                })\n    }\n\n    // if (cardTotal >= 3) {\n    return (\n        <div>\n            {/* <Switch> */}\n            {/* <Route exact path={`${url}/`}> */}\n            {/* <NavBreadCrumb page={mainState.page} deck={blankVar} deep={mainState.deepBreadCrumb} mainState={mainState} \n            setMainState={setMainState}/> */}\n            <h5><Link to=\"/\">Home</Link>\n                {`/${deck.name}`}</h5>\n            <h2>{deck.name}</h2>\n            <p>{deck.description}</p>\n            <Link to={`/decks/${deckId}/edit`} className=\"btn\">Edit</Link>\n            <Link to={`/decks/${deckId}/study`} className=\"btn\">Study</Link>\n            <Link to={`/decks/${deckId}/cards/new`} className=\"btn\">Add Cards</Link>\n            <button type=\"button\" onClick={() => deleteClick(deck.id)}>Delete</button>\n            <h2>Cards</h2>\n            <CardList />\n            {/* <DeckForm editState={mainState.edit}/> */}\n            {/* <Buttons setAllDecks={setAllDecks} mainState={mainState} buttons={buttons} /> */}\n            {/* </Route> */}\n\n            {/* </Switch> */}\n        </div>\n    )\n    // }\n    // return(null)\n\n\n}\n\nexport default ViewDeck","import React, { useEffect, useState } from \"react\"\nimport { Link, useParams } from \"react-router-dom\"\n// import {Buttons,NavBreadCrumb} from \"../SubComponents/SubComponents\"\nimport { DeckForm } from \"../SubComponents/Forms\"\nimport { readDeck } from \"../../utils/api/index\"\nfunction EditDeck(props) {\n    // const history=useHistory()\n    const { apiRefresh, setApiRefresh } = props\n    const { deckId } = useParams()\n    const [deck, setDeck] = useState({})\n    const [newOrEdit,\n        // setNewOrEdit\n    ] = useState(\"edit\")\n    // const abortController=new AbortController()\n    useEffect(() => {\n        readDeck(deckId).then(setDeck)\n        // setMainState({...mainState,editState:true, deepBreadCrumb:true, page:\"Edit Deck\"})\n    }, [deckId,apiRefresh])\n    console.log(deck, \"deck\")\n    // history.location.pathname\n    // ${deck.name}\n    // const {url}=useRouteMatch()\n    return (\n        <div>\n            {/* <NavBreadCrumb deckLink={url} deck={deck} setMainState={setMainState} page={mainState.page} mainState={mainState} \n             deep={mainState.deepBreadCrumb}/>   */}\n            <h5><Link to=\"/\">Home</Link>/<Link to={`/decks/${deck.id}`}>{`${deck.name}/`}</Link>Edit Deck</h5>\n            <h2>Edit Deck\n                {/* {deck.name} */}\n            </h2>\n            {/* <DeckEditForm newOrEdit={newOrEdit} setApiRefresh={setApiRefresh} apiRefresh={apiRefresh} */}\n            <DeckForm newOrEdit={newOrEdit} setApiRefresh={setApiRefresh} apiRefresh={apiRefresh}\n                // editState={mainState.editState} \n                deck={deck}\n            //  setAllDecks={setAllDecks} allDecks={allDecks}\n            />\n            {/* <Buttons \n            // setAllDecks={setAllDecks} \n            // mainState={mainState}\n            /> */}\n        </div>\n    )\n}\n\nexport default EditDeck\n\n// function StudyDeck(props){\n//     const {mainState,setAllDecks,setMainState, deck}=props\n//     useEffect(()=>{\n//        setMainState({...mainState,edit:true,page:\"Study\"})\n//     },[])\n//     return( \n//         <div>\n//             <NavBreadCrumb pageState={mainState.page}/>            \n//             <DeckForm editState={mainState.edit} deck={deck}/>\n//             <Buttons setAllDecks={setAllDecks} mainState={mainState}/>\n//         </div>\n//     )\n// }","import React, { useState, useEffect } from \"react\"\nimport { Link, useParams } from \"react-router-dom\"\n// import {Buttons,NavBreadCrumb} from \"../SubComponents/SubComponents\"\n// import {DeckForm} from \"../SubComponents/Forms\"\nimport { readDeck } from \"../../utils/api/index\"\n\nfunction StudyTop(props) {\n    const { deckId } = useParams()\n    const [deck, setDeck] = useState({})\n    // const {mainState,setAllDecks,setMainState\n    // const [cardOfDeck,setCardOfDeck]=useState(1)\n\n    // , deck,url\n    const {\n        // setApiRefresh,\n        apiRefresh } = props\n    // const abortController=new AbortController()\n    useEffect(() => {\n\n        readDeck(deckId).then(setDeck)\n\n        //    setMainState({...mainState,editState:true,page:\"Study\"})\n    }, [apiRefresh, deckId])\n    // console.log(deck,\"deck in studydeck\")\n    return (\n        <div>\n            {/* <NavBreadCrumb pageState={mainState.page}/>      */}\n            <h5><Link to=\"/\">Home</Link>/<Link to={\n                `/decks/${deck.id}`\n            }>{`${deck.name}`}</Link>/ Study</h5>\n            <h2>{deck.name}: Study</h2>\n            {/* <DeckForm editState={mainState.editState} deck={deck}/> */}\n\n\n            {/* <Buttons setAllDecks={setAllDecks} mainState={mainState}/> */}\n        </div>\n    )\n}\nexport default StudyTop","import React from \"react\"\nimport { Link, useParams } from \"react-router-dom\"\n// import {Buttons,NavBreadCrumb} from \"../SubComponents/SubComponents\"\n// import {DeckForm} from \"../SubComponents/Forms\"\n// import {readDeck,readCard} from \"../../utils/api/index\"\n\n\nfunction NotEnoughCards(props) {\n    const { deckId } = useParams()\n    const { deckLength } = props\n\n    return (\n        <div>\n            <h4>Not Enough Cards.</h4>\n            <p>You need at least 3 cards to study. There are {deckLength} in this deck.</p>\n            <Link to={`/decks/${deckId}/cards/new`}>Add Cards</Link>\n        </div>\n    )\n}\n\nexport default NotEnoughCards","import React, { useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\n\nfunction StudyByCard(props) {\n    const { cardOfDeck, deckLength, setCardOfDeck, card = {} } = props\n    // cardOfDeck={cardOfDeck} setCardOfDeck={setCardOfDeck} card={card} deck={deck}\n    // const {deckId}=useParams()\n    // const    abortController=new AbortController()\n    const [flipped, setFlipped] = useState(false)\n    const [fOrB, setFOrB] = useState(true)\n    // const [deck, setDeck]=useState({})\n    // const {mainState,setAllDecks,setMainState\n    // const [cardOfDeck,setCardOfDeck]=useState(1)\n    // const[card,setCard]=useState({})\n\n    const history = useHistory()\n    // , deck,url\n    // const{setApiRefresh,apiRefresh}=props\n    // const abortController=new AbortController()\n    // const deckLength=deck.cards.length\n    // useEffect(()=>{\n\n    //     readDeck(deckId,AbortController.signal).then(setDeck)\n    // const [frontContent,setFrontContent]=useState({})\n    // const [backContent,setBackContent]=useState({})\n    function nextHandler() {\n        if (cardOfDeck + 1 !== deckLength) {\n            setFlipped(false)\n            setFOrB(true)\n            setCardOfDeck(cardOfDeck + 1)\n        }\n        else {\n            finalCardHandler()\n        }\n    }\n    function flipHandler() {\n        if (flipped === false) { setFlipped(true) }\n        setFOrB(!fOrB)\n    }\n    function finalCardHandler() {\n        if (window.confirm(\"Restart cards? Click 'cancel to return to the home page.\")) {\n            setCardOfDeck(0);\n            setFlipped(false)\n            setFOrB(true)\n        }\n        else {\n            history.push(\"/\")\n        }\n    }\n\n    // useEffect(()=>{\n    //     if(Object.keys(frontContent).length===0||!frontContent){\n    //         setFrontContent(card.front)\n    //     }\n    // },[card])\n    // useEffect(()=>{\n    //     if(Object.keys(backContent||!frontContent).length===0){\n    //         setBackContent(card.back)\n    //     }\n    // },[card])\n    // useEffect(()=>{\n    //         setFrontContent(card.front)\n    // },[card])\n    // useEffect(()=>{\n    //         setBackContent(card.back)\n    // },[card])\n\n    // console.log(frontContent)\n    // //    setMainState({...mainState,editState:true,page:\"Study\"})\n    // },[apiRefresh,deckId])\n    // useEffect(()=>{\n    // readCard(cardOfDeck,abortController.signal).then(setCard)},[cardOfDeck]\n    // )\n    // console.log(deck,\"deck in studydeck\")\n    // if (Object.keys(card).length!==0){\n    if (fOrB === true) return (<div>\n        <p>{`Card ${cardOfDeck + 1} of ${deckLength}`}</p>\n        <p>{\n            // frontContent\n            card.front\n        }</p>\n        <button type=\"button\" onClick={flipHandler}>Flip</button>\n        {cardOfDeck + 1 !== deckLength ? (\n            flipped === true ? <button type=\"button\" onClick={nextHandler}>Next</button> : null\n        ) : null}\n\n    </div>\n    )\n    return (<div>\n        <p>{`Card ${cardOfDeck + 1} of ${deckLength}`}</p>\n        <p>{\n            // backContent\n            card.back\n        }</p>\n        <button type=\"button\" onClick={flipHandler}>Flip</button>\n        <button type=\"button\" onClick={nextHandler}>Next</button>\n    </div>)\n    // }else{return (<p>...loading</p>)}\n}\n\nexport default StudyByCard","import React, { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\n// import {Buttons,NavBreadCrumb} from \"../SubComponents/SubComponents\"\n// import {DeckForm} from \"../SubComponents/Forms\"\nimport { readDeck, readCard } from \"../../utils/api/index\"\nimport StudyTop from \"./StudyTop\"\nimport NotEnoughCards from \"./NotEnoughCards\"\nimport StudyByCard from \"./StudyByCard\"\nfunction StudyDeck(props) {\n    const { deckId } = useParams()\n    const [deck, setDeck] = useState({ cards: [] })\n    // const {mainState,setAllDecks,setMainState\n    const [cardOfDeck, setCardOfDeck] = useState(0)\n    const [card, setCard] = useState({})\n\n\n    // , deck,url\n    const { setApiRefresh, apiRefresh } = props\n    // const abortController = new AbortController()\n    const deckLength = deck.cards.length\n    useEffect(() => {\n\n        readDeck(deckId).then(setDeck)\n\n\n        //    setMainState({...mainState,editState:true,page:\"Study\"})\n    }, [apiRefresh, deckId])\n    useEffect(() => {\n        console.log(deck)\n        if (deck.cards.length > 0) {\n            console.log(\"deck cards have loaded\")\n            console.log(\"card of deck id\", deck.cards[cardOfDeck])\n            readCard(deck.cards[cardOfDeck].id).then((id) => { console.log(id); setCard(id) })\n        }\n    }\n        , [deck, cardOfDeck])\n    // console.log(deck,\"deck in studydeck\")\n    if (deckLength > 2) return (<div>\n        <StudyTop setApiRefresh={setApiRefresh} />\n        <StudyByCard cardOfDeck={cardOfDeck} setCardOfDeck={setCardOfDeck} card={card} deck={deck} deckLength={deckLength} />\n    </div>\n    )\n    return (<div>\n        <StudyTop setApiRefresh={setApiRefresh} />\n        <NotEnoughCards deckId={deckId} deckLength={deckLength} />\n    </div>)\n}\n\nexport default StudyDeck","import React, { useState, Fragment, useEffect } from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { createCard, updateCard } from \"../../utils/api/index\"\n\nfunction NewCardSubmitButtons({ setApiRefresh, deck, newOrEditCard }) {\n    return (\n        <Fragment>\n            <Link to={(newOrEditCard === \"edit?\") ? \"/\" : `/decks/${deck.id}`} className=\"btn\">{(newOrEditCard === \"new\") ? \"done\" : \"Cancel\"}</Link>\n            <button type=\"submit\">Submit</button>\n\n        </Fragment>\n    )\n}\n// function Buttons(){\n//     return null\n\n// }\nfunction CardForm(props) {\n    const { newOrEditCard, setApiRefresh, apiRefresh, deck,\n        // mainState,deck,setCardsOfDeck,CardsOfDeck,\n        // editState, setAllDecks, allDecks, setError,\n        thisCard\n        // ,setThisCard,url\n    } = props\n    // const abortController = new AbortController()\n    console.log(thisCard, \"this card\")\n    //  const editState = mainState.cardEdit\n    // console.log(allDecks)\n    //  console.log(deck,\"deck\")\n    // console.log(typeof deck,\"type of of deck\")\n    // console.log(typeof allDecks, \"alldecks type\")\n    // console.log(allDecks,\"all decks\")\n    const history = useHistory()\n    const [editBegun, setEditBegun] = useState(false)\n    const frontIf = (newOrEditCard === \"edit\") ? thisCard.front : \"\"\n    const backIf = (newOrEditCard === \"edit\") ? thisCard.back : \"\"\n    const [cardContent, setCardContent] = useState({ front: frontIf, back: backIf })\n    useEffect(() => {\n        if (newOrEditCard === \"edit\" && !cardContent.front && thisCard && editBegun === false)//set deck to card\n        {\n            setCardContent({ ...thisCard })\n        }\n    },[newOrEditCard,cardContent.front,thisCard,editBegun])\n    //  {front:frontIf,back:backIf}\n    // const[deckFormContent,setDeckFormContent]=useState({name:nameIf,description:descIf})\n\n    const handleChangeFrontForm = ({ target }) => {\n        setEditBegun(true)\n        setCardContent({ ...cardContent, front: target.value })\n    }\n    const handleChangeBackForm = ({ target }) => {\n        setEditBegun(true)\n        setCardContent({ ...cardContent, back: target.value })\n    }\n\n    const createFetch = () => {\n        createCard(deck.id, cardContent)\n            .then((result) => {\n                // console.log(result);\n                // console.log(result,\"api create result\")\n                // console.log(allDecks,\"allDecks not iterable but spread? Not iterating???\")\n                setCardContent({ front: '', back: '' })\n                setApiRefresh(apiRefresh + 1)\n                // history.push(\"/\")\n            })\n        // .catch((error)=>{console.log(error)})\n    }\n    const updateFetch = () => {\n        updateCard(cardContent)\n            .then((result) => {\n                // console.log(result,\"result from update fetch\")\n                // console.log(typeof allDecks,allDecks,\"allDecks type and actual content\")\n                // setCard([...cardContent])\n                // console.log(result.id,\"result.id\")\n                setApiRefresh(apiRefresh + 1)\n                history.push(`/decks/${deck.id}`)\n\n            })\n        // .catch((error)=>{console.log(error)})\n    }\n\n    // console.log(\"deckformfields Reached\")\n    // edit?console.log(deck.id,\"deck ID should exist if editing \"):console.log(\"wtf\")\n\n    const handleCardSubmit = (event) => {\n        event.preventDefault();\n        createFetch()\n    }\n    const handleCardUpdate = (event) => {\n        event.preventDefault();\n        updateFetch()\n    }\n    return (<div>\n        {/* <p>testing return</p> */}\n        <h2>Edit Card</h2>\n        <form onSubmit={(newOrEditCard === \"edit\") ? handleCardUpdate : handleCardSubmit}>\n            <label >Front\n           <textarea\n                    value={cardContent.front}\n                    onChange={handleChangeFrontForm}\n                    placeholder=\"front placeholder\"\n                />\n            </label><br />\n            <label >\n                Back\n           <textarea\n                    value={cardContent.back}\n                    onChange={handleChangeBackForm}\n                    placeholder=\"back placeholder\"\n                />\n            </label><br />\n            <NewCardSubmitButtons newOrEditCard={newOrEditCard} setApiRefresh={setApiRefresh} deck={deck} />\n        </form>\n    </div>\n    )\n}\n\n\n//     const{deck,url}=props\n//     return (\n//         <div>\n\n//         </div>\n//     )\n// }\nexport default CardForm","import React, { useState, useEffect } from \"react\"\nimport { Link, useParams } from \"react-router-dom\"\nimport CardForm from \"./CardForm\"\nimport { readDeck, readCard } from \"../../utils/api/index\"\n\n\nfunction CardEdit(props) {\n    const { cardId, deckId } = useParams()\n    // const abortController = new AbortController()\n    const { apiRefresh, setApiRefresh\n        // url,\n        // mainState\n    } = props\n    const [newOrEditCard,\n        // setNewOrEditCard\n    ] = useState(\"edit\")\n    const [thisCard, setThisCard] = useState({})\n    const [deck, setDeck] = useState({})\n    // const { deckId } = useParams()//Do your fetching with this\n    useEffect(() => {\n        readDeck(deckId).then((deck) => {\n            setDeck(deck)\n            readCard(cardId).then(setThisCard)\n        })\n\n    }, [apiRefresh,cardId,deck,deckId])\n\n    //get the actual card with a fetch via cardId and place it into thisCard?\n\n    return (\n        <div>\n            <h5><Link to=\"/\">Home</Link>/<Link to={`/decks/${deck.id}`}>{`${deck.name}`}</Link>{`/Edit Card ${cardId}`}</h5>\n\n            <CardForm\n                //  url={url} \n                deck={deck}\n                newOrEditCard={newOrEditCard}\n                apiRefresh={apiRefresh}\n                setApiRefresh={setApiRefresh}\n                //  mainState={mainState} \n                thisCard={thisCard}\n            // setThisCard={setThisCard}\n            />\n        </div>\n    )\n}\nexport default CardEdit","import React, { useState, useEffect } from \"react\"\nimport { Link, useParams } from \"react-router-dom\"\nimport CardForm from \"./CardForm\"\nimport { readDeck } from \"../../utils/api/index\"\n\nfunction AddCards(props) {\n    // const{url,mainState,cardsOfDeck,setCardsOfDeck}=props\n    const { deckId } = useParams()\n    // const history=useHistory()\n    const [deck, setDeck] = useState([])\n    const [newOrEditCard,\n        // setNewOrEditCard\n    ] = useState(\"new\")\n    const { apiRefresh, setApiRefresh } = props\n    useEffect(() => {\n\n        readDeck(deckId).then(setDeck)\n\n        //    setMainState({...mainState,editState:true,page:\"Study\"})\n    }, [deckId])\n\n    return (\n        <div>\n            <h5><Link to=\"/\">Home</Link>/<Link to={`/decks/${deck.id}/`}>{deck.name}</Link>/Add Card</h5>\n            <h2>{`${deck.name}:Add Card`}</h2>\n            <CardForm setApiRefresh={setApiRefresh} apiRefresh={apiRefresh} newOrEditCard={newOrEditCard} deck={deck}\n            // url={url} \n            // cardsOfDeck={cardsOfDeck} \n            // setCardsOfDeck={setCardsOfDeck} \n            // mainState={mainState}\n            />\n        </div>\n    )\n}\nexport default AddCards","import React, { useState, Fragment } from \"react\";\nimport Header from \"./Header\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport NotFound from \"./NotFound\";\nimport CreateNew from \"../Layout/DeckComponents/CreateNew\"\nimport DecksListed from \"../Layout/DeckComponents/DecksListed\"\nimport ViewDeck from \"../Layout/DeckComponents/ViewDeck\"\n\nimport EditDeck from \"../Layout/DeckComponents/EditDeck\"\nimport StudyDeck from \"../Layout/DeckComponents/StudyDeck\"\nimport CardEdit from \"../Layout/CardComponents/CardEdit\"\nimport AddCards from \"../Layout/CardComponents/AddCards\"\n\n\nfunction Layout() {\n  // console.log(listDecks)\n  const [apiRefresh, setApiRefresh] = useState(1)\n\n  //way to list all decks\n  // const [allDecks,setAllDecks] =useState([]) \n  // let defaultMainState = {\n  //   page:\"Home\",\n  //   editState: false,\n  //   deepBreadCrumb: false,\n  //   cardEdit: false,\n  //   create:false\n\n  // }\n  // const [update, setUpdate]=useState(false)\n  // const [mainState, setMainState]=useState({...defaultMainState})\n  //way to know current deck you're using/focused on\n  // const [currentDeckId,setCurrentDeckId] =useState('')\n  //current card to focus on\n  // const [currentCardId,setCurrentCardId] =useState('')\n  // const [error,setError] =useState(undefined)\n  // const abortController = new AbortController\n  // const abortController = new AbortController();\n\n  // console.log(allDecks)\n\n  // function DeleteClick (deckId){       ***Moved to Deckslisted directly\n  //   // const history=useHistory()\n  //   console.log(\"entered DeleteClick\")\n  //   console.log(allDecks,\"allDecks\")\n  //   useEffect(()=>{\n  //     deleteDeck(deckId,abortController.signal)\n  //     .then((x)=>{setAllDecks(x);console.log(x)}) \n  //     // this is likely not the move to do here cause the reply is an empty {}\n  //     .catch(setError);\n  //     return ()=> abortController.abort()\n  //   },[]\n  //   )\n  //   if (error){\n  //     return null\n  //   }\n  //   // getAllDecks(); likely not necessary b/c useEffect of list all watching setAllDecks\n  //   // history.push(\"/\") // might not be necessary cause it's in api?\n  // }\n  // GetAllDecks();\n  // return(<p>hello world</p>)\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route exact path=\"/\">\n            {/*switch the above to a Link locally on home*/}\n            <Link to=\"/decks/new\"\n            //  onClick={()=>setMainState({...mainState,create:true})}\n            >Create Deck</Link>\n            <DecksListed\n              // allDecks={allDecks} \n              // setAllDecks={setAllDecks} \n              // setError={setError} \n              // error={error}\n              // setMainState={setMainState}\n              // mainState={mainState} \n              // mainState={mainState} \n              // setMainState={setMainState}\n              // deleteProp={DeleteClick} **moved to deckslisted\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            />\n          </Route>\n          <Route path=\"/decks/new\">{/*must constrain new so it isn't construed as a deckId param */}\n            <CreateNew\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            // allDecks={allDecks} \n            // setAllDecks={setAllDecks} \n            // setError={setError} \n            // error={error}\n            // mainState={mainState} \n            // setMainState={setMainState}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCards\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            // mainState={mainState}\n            // setAllDecks={setAllDecks}\n            // setMainState={setMainState}\n            // {/* deck={deck} */}\n            // {/* url={url} */}\n            // {/* cardsOfDeck={cardsOfDeck}  */}\n            // setCardsOfDeck={setCardsOfDeck} \n            />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            // mainState={mainState}\n            // setAllDecks={setAllDecks}\n            // setMainState={setMainState}\n            // deck={deck}\n            // allDecks={allDecks}\n            // url={url}\n            />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <StudyDeck\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            // mainState={mainState}\n            // setAllDecks={setAllDecks}\n            // setMainState={setMainState}\n            // deck={deck}\n            // url={url}\n            // cardsOfDeck={cardsOfDeck} \n            // setCardsOfDeck={setCardsOfDeck} \n            />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <CardEdit\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            // mainState={mainState}\n            // setAllDecks={setAllDecks}\n            // setMainState={setMainState}\n            // deck={deck}\n            // url={url}\n            // cardsOfDeck={cardsOfDeck} \n            // setCardsOfDeck={setCardsOfDeck} \n            />\n          </Route>\n          <Route exact path=\"/decks/:deckId\">\n            <ViewDeck\n              apiRefresh={apiRefresh} setApiRefresh={setApiRefresh}\n            // allDecks={allDecks} \n            // setAllDecks={setAllDecks} \n            // setError={setError} \n            // error={error}\n            // mainState={mainState} \n            // setMainState={setMainState}\n            />\n          </Route>\n          <Route >\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}